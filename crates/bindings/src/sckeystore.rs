/**

Generated by the following Solidity interface...
```solidity
interface ScKeystore {
    struct KeyPackage {
        bytes[] data;
    }
    struct UserInfo {
        uint256[] keyPackageIndices;
        bytes signaturePubKey;
    }

    error MalformedKeyPackage();
    error MalformedUserInfo();
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);
    error UserAlreadyExists();
    error UserDoesNotExist();

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event UserAdded(address user, bytes signaturePubKey);
    event UserKeyPackageAdded(address indexed user, uint256 index);

    constructor(address initialOwner);

    function addKeyPackage(KeyPackage memory keyPackage) external;
    function addUser(address user, bytes memory signaturePubKey, KeyPackage memory keyPackage) external;
    function getAllKeyPackagesForUser(address user) external view returns (KeyPackage[] memory);
    function getAvailableKeyPackage(address user) external view returns (KeyPackage memory);
    function getUser(address user) external view returns (UserInfo memory);
    function owner() external view returns (address);
    function renounceOwnership() external;
    function transferOwnership(address newOwner) external;
    function userExists(address user) external view returns (bool);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "initialOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "addKeyPackage",
    "inputs": [
      {
        "name": "keyPackage",
        "type": "tuple",
        "internalType": "struct KeyPackage",
        "components": [
          {
            "name": "data",
            "type": "bytes[]",
            "internalType": "bytes[]"
          }
        ]
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "addUser",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "signaturePubKey",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "keyPackage",
        "type": "tuple",
        "internalType": "struct KeyPackage",
        "components": [
          {
            "name": "data",
            "type": "bytes[]",
            "internalType": "bytes[]"
          }
        ]
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "getAllKeyPackagesForUser",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "tuple[]",
        "internalType": "struct KeyPackage[]",
        "components": [
          {
            "name": "data",
            "type": "bytes[]",
            "internalType": "bytes[]"
          }
        ]
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getAvailableKeyPackage",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct KeyPackage",
        "components": [
          {
            "name": "data",
            "type": "bytes[]",
            "internalType": "bytes[]"
          }
        ]
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getUser",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct UserInfo",
        "components": [
          {
            "name": "keyPackageIndices",
            "type": "uint256[]",
            "internalType": "uint256[]"
          },
          {
            "name": "signaturePubKey",
            "type": "bytes",
            "internalType": "bytes"
          }
        ]
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "userExists",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "UserAdded",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      },
      {
        "name": "signaturePubKey",
        "type": "bytes",
        "indexed": false,
        "internalType": "bytes"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "UserKeyPackageAdded",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "index",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "MalformedKeyPackage",
    "inputs": []
  },
  {
    "type": "error",
    "name": "MalformedUserInfo",
    "inputs": []
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "UserAlreadyExists",
    "inputs": []
  },
  {
    "type": "error",
    "name": "UserDoesNotExist",
    "inputs": []
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod ScKeystore {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234801561001057600080fd5b506040516117b93803806117b983398101604081905261002f916100be565b806001600160a01b03811661005e57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6100678161006e565b50506100ee565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100d057600080fd5b81516001600160a01b03811681146100e757600080fd5b9392505050565b6116bc806100fd6000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063715018a611610076578063c8d178b21161005b578063c8d178b214610162578063f2fde38b14610175578063fe52f7961461018857600080fd5b8063715018a6146101305780638da5cb5b1461013a57600080fd5b80630e666e49146100a857806333cf520c146100d057806351ca7a9f146100f05780636f77926b14610110575b600080fd5b6100bb6100b6366004610d9a565b61019b565b60405190151581526020015b60405180910390f35b6100e36100de366004610d9a565b6101db565b6040516100c79190610ea6565b6101036100fe366004610d9a565b610438565b6040516100c79190610eb9565b61012361011e366004610d9a565b610707565b6040516100c79190610f2e565b61013861082d565b005b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100c7565b610138610170366004610fd0565b610841565b610138610183366004610d9a565b610aa9565b610138610196366004611078565b610b12565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260016020819052604082200180548291906101d1906110b5565b9050119050919050565b60408051602081019091526060815273ffffffffffffffffffffffffffffffffffffffff8216600090815260016020908152604080832081518154606094810282018501845292810183815290939192849284919084018282801561025f57602002820191906000526020600020905b81548152602001906001019080831161024b575b50505050508152602001600182018054610278906110b5565b80601f01602080910402602001604051908101604052809291908181526020018280546102a4906110b5565b80156102f15780601f106102c6576101008083540402835291602001916102f1565b820191906000526020600020905b8154815290600101906020018083116102d457829003601f168201915b50505050508152505090506000816000015160018360000151516103159190611102565b8151811061032557610325611142565b602002602001015190506002818154811061034257610342611142565b9060005260206000200160405180602001604052908160008201805480602002602001604051908101604052809291908181526020016000905b8282101561042857838290600052602060002001805461039b906110b5565b80601f01602080910402602001604051908101604052809291908181526020018280546103c7906110b5565b80156104145780601f106103e957610100808354040283529160200191610414565b820191906000526020600020905b8154815290600101906020018083116103f757829003601f168201915b50505050508152602001906001019061037c565b5050509152509095945050505050565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260016020908152604080832081518154938402810160609081018452928101848152929493909283918390838801828280156104af57602002820191906000526020600020905b81548152602001906001019080831161049b575b505050505081526020016001820180546104c8906110b5565b80601f01602080910402602001604051908101604052809291908181526020018280546104f4906110b5565b80156105415780601f1061051657610100808354040283529160200191610541565b820191906000526020600020905b81548152906001019060200180831161052457829003601f168201915b5050505050815250509050600081600001515167ffffffffffffffff81111561056c5761056c611171565b6040519080825280602002602001820160405280156105ac57816020015b60408051602081019091526060815281526020019060019003908161058a5790505b50905060005b8251518110156106ff576002836000015182815181106105d4576105d4611142565b6020026020010151815481106105ec576105ec611142565b9060005260206000200160405180602001604052908160008201805480602002602001604051908101604052809291908181526020016000905b828210156106d2578382906000526020600020018054610645906110b5565b80601f0160208091040260200160405190810160405280929190818152602001828054610671906110b5565b80156106be5780601f10610693576101008083540402835291602001916106be565b820191906000526020600020905b8154815290600101906020018083116106a157829003601f168201915b505050505081526020019060010190610626565b50505050815250508282815181106106ec576106ec611142565b60209081029190910101526001016105b2565b509392505050565b6040805180820182526060808252602080830182905273ffffffffffffffffffffffffffffffffffffffff85166000908152600182528490208451815492830281018401865294850182815293949390928492849184018282801561078b57602002820191906000526020600020905b815481526020019060010190808311610777575b505050505081526020016001820180546107a4906110b5565b80601f01602080910402602001604051908101604052809291908181526020018280546107d0906110b5565b801561081d5780601f106107f25761010080835404028352916020019161081d565b820191906000526020600020905b81548152906001019060200180831161080057829003601f168201915b5050505050815250509050919050565b610835610c49565b61083f6000610c9c565b565b610849610c49565b6000829003610884576040517ff969dd5900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61088e81806111a0565b90506000036108c9576040517f2bc32b1600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108d28461019b565b15610909576040517fc344397e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002805460018101825560009190915281907f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0161094782826113e8565b505060025460009061095b90600190611102565b604080516000818301908152606082018352815281516020601f880181900481028201810190935286815292935091818301918790879081908401838280828437600092018290525093909452505073ffffffffffffffffffffffffffffffffffffffff88168152600160209081526040909120835180519193506109e4928492910190610d11565b50602082015160018201906109f99082611534565b50505073ffffffffffffffffffffffffffffffffffffffff8516600090815260016020819052604090912001610a308486836112ce565b5073ffffffffffffffffffffffffffffffffffffffff85166000908152600160208181526040808420805493840181558452922001829055517f3d3d05375966308799f27583173d73adad0e9648aac96d354b0d554a6ea8d57490610a9a90879087908790611652565b60405180910390a15050505050565b610ab1610c49565b73ffffffffffffffffffffffffffffffffffffffff8116610b06576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024015b60405180910390fd5b610b0f81610c9c565b50565b610b1c81806111a0565b9050600003610b57576040517f2bc32b1600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b603361019b565b610b96576040517f907b361f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002805460018101825560009190915281907f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01610bd482826113e8565b5050600254600090610be890600190611102565b33600081815260016020818152604080842080549384018155845292200183905551919250907fd594e1a09354af093e9bba3f535456e7e5b0345990e37c37e9c41bb57b9912ca90610c3d9084815260200190565b60405180910390a25050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461083f576040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152602401610afd565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054828255906000526020600020908101928215610d4c579160200282015b82811115610d4c578251825591602001919060010190610d31565b50610d58929150610d5c565b5090565b5b80821115610d585760008155600101610d5d565b803573ffffffffffffffffffffffffffffffffffffffff81168114610d9557600080fd5b919050565b600060208284031215610dac57600080fd5b610db582610d71565b9392505050565b6000815180845260005b81811015610de257602081850181015186830182015201610dc6565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b6000602080840183516020865281815180845260408801915060408160051b890101935060208301925060005b81811015610e99577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0898603018352610e87858551610dbc565b94509285019291850191600101610e4d565b5092979650505050505050565b602081526000610db56020830184610e20565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b82811015610e99577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452610f1c858351610e20565b94509285019290850190600101610ee2565b6020808252825160408383015280516060840181905260009291820190839060808601905b80831015610f735783518252928401926001929092019190840190610f53565b50928601518584037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001604087015292610fad8185610dbc565b979650505050505050565b600060208284031215610fca57600080fd5b50919050565b60008060008060608587031215610fe657600080fd5b610fef85610d71565b9350602085013567ffffffffffffffff8082111561100c57600080fd5b818701915087601f83011261102057600080fd5b81358181111561102f57600080fd5b88602082850101111561104157600080fd5b60208301955080945050604087013591508082111561105f57600080fd5b5061106c87828801610fb8565b91505092959194509250565b60006020828403121561108a57600080fd5b813567ffffffffffffffff8111156110a157600080fd5b6110ad84828501610fb8565b949350505050565b600181811c908216806110c957607f821691505b602082108103610fca577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b8181038181111561113c577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126111d557600080fd5b83018035915067ffffffffffffffff8211156111f057600080fd5b6020019150600581901b360382131561120857600080fd5b9250929050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261124457600080fd5b83018035915067ffffffffffffffff82111561125f57600080fd5b60200191503681900382131561120857600080fd5b5b818110156112895760008155600101611275565b5050565b601f8211156112c957806000526020600020601f840160051c810160208510156112b45750805b6112c6601f850160051c830182611274565b50505b505050565b67ffffffffffffffff8311156112e6576112e6611171565b6112fa836112f483546110b5565b8361128d565b6000601f84116001811461134c57600085156113165750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b1783556112c6565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b8281101561139b578685013582556020948501946001909201910161137b565b50868210156113d6577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b81357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe183360301811261141a57600080fd5b8201803567ffffffffffffffff81111561143357600080fd5b602091820191600582811b360384131561144c57600080fd5b6801000000000000000083111561146557611465611171565b8454838655808410156114ed576000868152602081208581019083015b808210156114e95761149482546110b5565b80156114dd57601f808211600181146114af578585556114da565b6000858152602090206114cb8385018a1c820160018301611274565b50600085815260208120818755555b50505b50600182019150611482565b5050505b505060008481526020812084915b8481101561152a5761150d838761120f565b6115188183866112ce565b505091830191600191820191016114fb565b5050505050505050565b815167ffffffffffffffff81111561154e5761154e611171565b6115628161155c84546110b5565b8461128d565b602080601f8311600181146115b5576000841561157f5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b17855561164a565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b82811015611602578886015182559484019460019091019084016115e3565b508582101561163e57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b505060018460011b0185555b505050505050565b73ffffffffffffffffffffffffffffffffffffffff8416815260406020820152816040820152818360608301376000818301606090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01601019291505056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`@Qa\x17\xB98\x03\x80a\x17\xB9\x839\x81\x01`@\x81\x90Ra\0/\x91a\0\xBEV[\x80`\x01`\x01`\xA0\x1B\x03\x81\x16a\0^W`@Qc\x1EO\xBD\xF7`\xE0\x1B\x81R`\0`\x04\x82\x01R`$\x01`@Q\x80\x91\x03\x90\xFD[a\0g\x81a\0nV[PPa\0\xEEV[`\0\x80T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16`\x01`\x01`\xA0\x1B\x03\x19\x83\x16\x81\x17\x84U`@Q\x91\x90\x92\x16\x92\x83\x91\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x91\x90\xA3PPV[`\0` \x82\x84\x03\x12\x15a\0\xD0W`\0\x80\xFD[\x81Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\0\xE7W`\0\x80\xFD[\x93\x92PPPV[a\x16\xBC\x80a\0\xFD`\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0\xA3W`\x005`\xE0\x1C\x80cqP\x18\xA6\x11a\0vW\x80c\xC8\xD1x\xB2\x11a\0[W\x80c\xC8\xD1x\xB2\x14a\x01bW\x80c\xF2\xFD\xE3\x8B\x14a\x01uW\x80c\xFER\xF7\x96\x14a\x01\x88W`\0\x80\xFD[\x80cqP\x18\xA6\x14a\x010W\x80c\x8D\xA5\xCB[\x14a\x01:W`\0\x80\xFD[\x80c\x0EfnI\x14a\0\xA8W\x80c3\xCFR\x0C\x14a\0\xD0W\x80cQ\xCAz\x9F\x14a\0\xF0W\x80cow\x92k\x14a\x01\x10W[`\0\x80\xFD[a\0\xBBa\0\xB66`\x04a\r\x9AV[a\x01\x9BV[`@Q\x90\x15\x15\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\0\xE3a\0\xDE6`\x04a\r\x9AV[a\x01\xDBV[`@Qa\0\xC7\x91\x90a\x0E\xA6V[a\x01\x03a\0\xFE6`\x04a\r\x9AV[a\x048V[`@Qa\0\xC7\x91\x90a\x0E\xB9V[a\x01#a\x01\x1E6`\x04a\r\x9AV[a\x07\x07V[`@Qa\0\xC7\x91\x90a\x0F.V[a\x018a\x08-V[\0[`\0T`@Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16\x81R` \x01a\0\xC7V[a\x018a\x01p6`\x04a\x0F\xD0V[a\x08AV[a\x018a\x01\x836`\x04a\r\x9AV[a\n\xA9V[a\x018a\x01\x966`\x04a\x10xV[a\x0B\x12V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16`\0\x90\x81R`\x01` \x81\x90R`@\x82 \x01\x80T\x82\x91\x90a\x01\xD1\x90a\x10\xB5V[\x90P\x11\x90P\x91\x90PV[`@\x80Q` \x81\x01\x90\x91R``\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16`\0\x90\x81R`\x01` \x90\x81R`@\x80\x83 \x81Q\x81T``\x94\x81\x02\x82\x01\x85\x01\x84R\x92\x81\x01\x83\x81R\x90\x93\x91\x92\x84\x92\x84\x91\x90\x84\x01\x82\x82\x80\x15a\x02_W` \x02\x82\x01\x91\x90`\0R` `\0 \x90[\x81T\x81R` \x01\x90`\x01\x01\x90\x80\x83\x11a\x02KW[PPPPP\x81R` \x01`\x01\x82\x01\x80Ta\x02x\x90a\x10\xB5V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x02\xA4\x90a\x10\xB5V[\x80\x15a\x02\xF1W\x80`\x1F\x10a\x02\xC6Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x02\xF1V[\x82\x01\x91\x90`\0R` `\0 \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x02\xD4W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81RPP\x90P`\0\x81`\0\x01Q`\x01\x83`\0\x01QQa\x03\x15\x91\x90a\x11\x02V[\x81Q\x81\x10a\x03%Wa\x03%a\x11BV[` \x02` \x01\x01Q\x90P`\x02\x81\x81T\x81\x10a\x03BWa\x03Ba\x11BV[\x90`\0R` `\0 \x01`@Q\x80` \x01`@R\x90\x81`\0\x82\x01\x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01`\0\x90[\x82\x82\x10\x15a\x04(W\x83\x82\x90`\0R` `\0 \x01\x80Ta\x03\x9B\x90a\x10\xB5V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x03\xC7\x90a\x10\xB5V[\x80\x15a\x04\x14W\x80`\x1F\x10a\x03\xE9Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x04\x14V[\x82\x01\x91\x90`\0R` `\0 \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x03\xF7W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81R` \x01\x90`\x01\x01\x90a\x03|V[PPP\x91RP\x90\x95\x94PPPPPV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16`\0\x90\x81R`\x01` \x90\x81R`@\x80\x83 \x81Q\x81T\x93\x84\x02\x81\x01``\x90\x81\x01\x84R\x92\x81\x01\x84\x81R\x92\x94\x93\x90\x92\x83\x91\x83\x90\x83\x88\x01\x82\x82\x80\x15a\x04\xAFW` \x02\x82\x01\x91\x90`\0R` `\0 \x90[\x81T\x81R` \x01\x90`\x01\x01\x90\x80\x83\x11a\x04\x9BW[PPPPP\x81R` \x01`\x01\x82\x01\x80Ta\x04\xC8\x90a\x10\xB5V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x04\xF4\x90a\x10\xB5V[\x80\x15a\x05AW\x80`\x1F\x10a\x05\x16Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x05AV[\x82\x01\x91\x90`\0R` `\0 \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x05$W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81RPP\x90P`\0\x81`\0\x01QQg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x05lWa\x05la\x11qV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x05\xACW\x81` \x01[`@\x80Q` \x81\x01\x90\x91R``\x81R\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x05\x8AW\x90P[P\x90P`\0[\x82QQ\x81\x10\x15a\x06\xFFW`\x02\x83`\0\x01Q\x82\x81Q\x81\x10a\x05\xD4Wa\x05\xD4a\x11BV[` \x02` \x01\x01Q\x81T\x81\x10a\x05\xECWa\x05\xECa\x11BV[\x90`\0R` `\0 \x01`@Q\x80` \x01`@R\x90\x81`\0\x82\x01\x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01`\0\x90[\x82\x82\x10\x15a\x06\xD2W\x83\x82\x90`\0R` `\0 \x01\x80Ta\x06E\x90a\x10\xB5V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x06q\x90a\x10\xB5V[\x80\x15a\x06\xBEW\x80`\x1F\x10a\x06\x93Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x06\xBEV[\x82\x01\x91\x90`\0R` `\0 \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x06\xA1W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81R` \x01\x90`\x01\x01\x90a\x06&V[PPPP\x81RPP\x82\x82\x81Q\x81\x10a\x06\xECWa\x06\xECa\x11BV[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x05\xB2V[P\x93\x92PPPV[`@\x80Q\x80\x82\x01\x82R``\x80\x82R` \x80\x83\x01\x82\x90Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x16`\0\x90\x81R`\x01\x82R\x84\x90 \x84Q\x81T\x92\x83\x02\x81\x01\x84\x01\x86R\x94\x85\x01\x82\x81R\x93\x94\x93\x90\x92\x84\x92\x84\x91\x84\x01\x82\x82\x80\x15a\x07\x8BW` \x02\x82\x01\x91\x90`\0R` `\0 \x90[\x81T\x81R` \x01\x90`\x01\x01\x90\x80\x83\x11a\x07wW[PPPPP\x81R` \x01`\x01\x82\x01\x80Ta\x07\xA4\x90a\x10\xB5V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x07\xD0\x90a\x10\xB5V[\x80\x15a\x08\x1DW\x80`\x1F\x10a\x07\xF2Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x08\x1DV[\x82\x01\x91\x90`\0R` `\0 \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x08\0W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81RPP\x90P\x91\x90PV[a\x085a\x0CIV[a\x08?`\0a\x0C\x9CV[V[a\x08Ia\x0CIV[`\0\x82\x90\x03a\x08\x84W`@Q\x7F\xF9i\xDDY\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\x08\x8E\x81\x80a\x11\xA0V[\x90P`\0\x03a\x08\xC9W`@Q\x7F+\xC3+\x16\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\x08\xD2\x84a\x01\x9BV[\x15a\t\tW`@Q\x7F\xC3D9~\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x02\x80T`\x01\x81\x01\x82U`\0\x91\x90\x91R\x81\x90\x7F@W\x87\xFA\x12\xA8#\xE0\xF2\xB7c\x1C\xC4\x1B;\xA8\x82\x8B3!\xCA\x81\x11\x11\xFAu\xCD:\xA3\xBBZ\xCE\x01a\tG\x82\x82a\x13\xE8V[PP`\x02T`\0\x90a\t[\x90`\x01\x90a\x11\x02V[`@\x80Q`\0\x81\x83\x01\x90\x81R``\x82\x01\x83R\x81R\x81Q` `\x1F\x88\x01\x81\x90\x04\x81\x02\x82\x01\x81\x01\x90\x93R\x86\x81R\x92\x93P\x91\x81\x83\x01\x91\x87\x90\x87\x90\x81\x90\x84\x01\x83\x82\x80\x82\x847`\0\x92\x01\x82\x90RP\x93\x90\x94RPPs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x88\x16\x81R`\x01` \x90\x81R`@\x90\x91 \x83Q\x80Q\x91\x93Pa\t\xE4\x92\x84\x92\x91\x01\x90a\r\x11V[P` \x82\x01Q`\x01\x82\x01\x90a\t\xF9\x90\x82a\x154V[PPPs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x16`\0\x90\x81R`\x01` \x81\x90R`@\x90\x91 \x01a\n0\x84\x86\x83a\x12\xCEV[Ps\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x16`\0\x90\x81R`\x01` \x81\x81R`@\x80\x84 \x80T\x93\x84\x01\x81U\x84R\x92 \x01\x82\x90UQ\x7F==\x057Yf0\x87\x99\xF2u\x83\x17=s\xAD\xAD\x0E\x96H\xAA\xC9m5K\rUJn\xA8\xD5t\x90a\n\x9A\x90\x87\x90\x87\x90\x87\x90a\x16RV[`@Q\x80\x91\x03\x90\xA1PPPPPV[a\n\xB1a\x0CIV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16a\x0B\x06W`@Q\x7F\x1EO\xBD\xF7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\0`\x04\x82\x01R`$\x01[`@Q\x80\x91\x03\x90\xFD[a\x0B\x0F\x81a\x0C\x9CV[PV[a\x0B\x1C\x81\x80a\x11\xA0V[\x90P`\0\x03a\x0BWW`@Q\x7F+\xC3+\x16\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\x0B`3a\x01\x9BV[a\x0B\x96W`@Q\x7F\x90{6\x1F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x02\x80T`\x01\x81\x01\x82U`\0\x91\x90\x91R\x81\x90\x7F@W\x87\xFA\x12\xA8#\xE0\xF2\xB7c\x1C\xC4\x1B;\xA8\x82\x8B3!\xCA\x81\x11\x11\xFAu\xCD:\xA3\xBBZ\xCE\x01a\x0B\xD4\x82\x82a\x13\xE8V[PP`\x02T`\0\x90a\x0B\xE8\x90`\x01\x90a\x11\x02V[3`\0\x81\x81R`\x01` \x81\x81R`@\x80\x84 \x80T\x93\x84\x01\x81U\x84R\x92 \x01\x83\x90UQ\x91\x92P\x90\x7F\xD5\x94\xE1\xA0\x93T\xAF\t>\x9B\xBA?STV\xE7\xE5\xB04Y\x90\xE3|7\xE9\xC4\x1B\xB5{\x99\x12\xCA\x90a\x0C=\x90\x84\x81R` \x01\x90V[`@Q\x80\x91\x03\x90\xA2PPV[`\0Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163\x14a\x08?W`@Q\x7F\x11\x8C\xDA\xA7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R3`\x04\x82\x01R`$\x01a\n\xFDV[`\0\x80Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83\x16\x81\x17\x84U`@Q\x91\x90\x92\x16\x92\x83\x91\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x91\x90\xA3PPV[\x82\x80T\x82\x82U\x90`\0R` `\0 \x90\x81\x01\x92\x82\x15a\rLW\x91` \x02\x82\x01[\x82\x81\x11\x15a\rLW\x82Q\x82U\x91` \x01\x91\x90`\x01\x01\x90a\r1V[Pa\rX\x92\x91Pa\r\\V[P\x90V[[\x80\x82\x11\x15a\rXW`\0\x81U`\x01\x01a\r]V[\x805s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\r\x95W`\0\x80\xFD[\x91\x90PV[`\0` \x82\x84\x03\x12\x15a\r\xACW`\0\x80\xFD[a\r\xB5\x82a\rqV[\x93\x92PPPV[`\0\x81Q\x80\x84R`\0[\x81\x81\x10\x15a\r\xE2W` \x81\x85\x01\x81\x01Q\x86\x83\x01\x82\x01R\x01a\r\xC6V[P`\0` \x82\x86\x01\x01R` \x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[`\0` \x80\x84\x01\x83Q` \x86R\x81\x81Q\x80\x84R`@\x88\x01\x91P`@\x81`\x05\x1B\x89\x01\x01\x93P` \x83\x01\x92P`\0[\x81\x81\x10\x15a\x0E\x99W\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xC0\x89\x86\x03\x01\x83Ra\x0E\x87\x85\x85Qa\r\xBCV[\x94P\x92\x85\x01\x92\x91\x85\x01\x91`\x01\x01a\x0EMV[P\x92\x97\x96PPPPPPPV[` \x81R`\0a\r\xB5` \x83\x01\x84a\x0E V[`\0` \x80\x83\x01` \x84R\x80\x85Q\x80\x83R`@\x86\x01\x91P`@\x81`\x05\x1B\x87\x01\x01\x92P` \x87\x01`\0[\x82\x81\x10\x15a\x0E\x99W\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xC0\x88\x86\x03\x01\x84Ra\x0F\x1C\x85\x83Qa\x0E V[\x94P\x92\x85\x01\x92\x90\x85\x01\x90`\x01\x01a\x0E\xE2V[` \x80\x82R\x82Q`@\x83\x83\x01R\x80Q``\x84\x01\x81\x90R`\0\x92\x91\x82\x01\x90\x83\x90`\x80\x86\x01\x90[\x80\x83\x10\x15a\x0FsW\x83Q\x82R\x92\x84\x01\x92`\x01\x92\x90\x92\x01\x91\x90\x84\x01\x90a\x0FSV[P\x92\x86\x01Q\x85\x84\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x01`@\x87\x01R\x92a\x0F\xAD\x81\x85a\r\xBCV[\x97\x96PPPPPPPV[`\0` \x82\x84\x03\x12\x15a\x0F\xCAW`\0\x80\xFD[P\x91\x90PV[`\0\x80`\0\x80``\x85\x87\x03\x12\x15a\x0F\xE6W`\0\x80\xFD[a\x0F\xEF\x85a\rqV[\x93P` \x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x10\x0CW`\0\x80\xFD[\x81\x87\x01\x91P\x87`\x1F\x83\x01\x12a\x10 W`\0\x80\xFD[\x815\x81\x81\x11\x15a\x10/W`\0\x80\xFD[\x88` \x82\x85\x01\x01\x11\x15a\x10AW`\0\x80\xFD[` \x83\x01\x95P\x80\x94PP`@\x87\x015\x91P\x80\x82\x11\x15a\x10_W`\0\x80\xFD[Pa\x10l\x87\x82\x88\x01a\x0F\xB8V[\x91PP\x92\x95\x91\x94P\x92PV[`\0` \x82\x84\x03\x12\x15a\x10\x8AW`\0\x80\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x10\xA1W`\0\x80\xFD[a\x10\xAD\x84\x82\x85\x01a\x0F\xB8V[\x94\x93PPPPV[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x10\xC9W`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x0F\xCAW\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\"`\x04R`$`\0\xFD[\x81\x81\x03\x81\x81\x11\x15a\x11<W\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\x11`\x04R`$`\0\xFD[\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`2`\x04R`$`\0\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`A`\x04R`$`\0\xFD[`\0\x80\x835\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE1\x846\x03\x01\x81\x12a\x11\xD5W`\0\x80\xFD[\x83\x01\x805\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x11\xF0W`\0\x80\xFD[` \x01\x91P`\x05\x81\x90\x1B6\x03\x82\x13\x15a\x12\x08W`\0\x80\xFD[\x92P\x92\x90PV[`\0\x80\x835\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE1\x846\x03\x01\x81\x12a\x12DW`\0\x80\xFD[\x83\x01\x805\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x12_W`\0\x80\xFD[` \x01\x91P6\x81\x90\x03\x82\x13\x15a\x12\x08W`\0\x80\xFD[[\x81\x81\x10\x15a\x12\x89W`\0\x81U`\x01\x01a\x12uV[PPV[`\x1F\x82\x11\x15a\x12\xC9W\x80`\0R` `\0 `\x1F\x84\x01`\x05\x1C\x81\x01` \x85\x10\x15a\x12\xB4WP\x80[a\x12\xC6`\x1F\x85\x01`\x05\x1C\x83\x01\x82a\x12tV[PP[PPPV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11\x15a\x12\xE6Wa\x12\xE6a\x11qV[a\x12\xFA\x83a\x12\xF4\x83Ta\x10\xB5V[\x83a\x12\x8DV[`\0`\x1F\x84\x11`\x01\x81\x14a\x13LW`\0\x85\x15a\x13\x16WP\x83\x82\x015[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x03\x87\x90\x1B\x1C\x19\x16`\x01\x86\x90\x1B\x17\x83Ua\x12\xC6V[`\0\x83\x81R` \x90 \x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x86\x16\x90\x83[\x82\x81\x10\x15a\x13\x9BW\x86\x85\x015\x82U` \x94\x85\x01\x94`\x01\x90\x92\x01\x91\x01a\x13{V[P\x86\x82\x10\x15a\x13\xD6W\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\xF8\x88`\x03\x1B\x16\x1C\x19\x84\x87\x015\x16\x81U[PP`\x01\x85`\x01\x1B\x01\x83UPPPPPV[\x815\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE1\x836\x03\x01\x81\x12a\x14\x1AW`\0\x80\xFD[\x82\x01\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x143W`\0\x80\xFD[` \x91\x82\x01\x91`\x05\x82\x81\x1B6\x03\x84\x13\x15a\x14LW`\0\x80\xFD[h\x01\0\0\0\0\0\0\0\0\x83\x11\x15a\x14eWa\x14ea\x11qV[\x84T\x83\x86U\x80\x84\x10\x15a\x14\xEDW`\0\x86\x81R` \x81 \x85\x81\x01\x90\x83\x01[\x80\x82\x10\x15a\x14\xE9Wa\x14\x94\x82Ta\x10\xB5V[\x80\x15a\x14\xDDW`\x1F\x80\x82\x11`\x01\x81\x14a\x14\xAFW\x85\x85Ua\x14\xDAV[`\0\x85\x81R` \x90 a\x14\xCB\x83\x85\x01\x8A\x1C\x82\x01`\x01\x83\x01a\x12tV[P`\0\x85\x81R` \x81 \x81\x87UU[PP[P`\x01\x82\x01\x91Pa\x14\x82V[PPP[PP`\0\x84\x81R` \x81 \x84\x91[\x84\x81\x10\x15a\x15*Wa\x15\r\x83\x87a\x12\x0FV[a\x15\x18\x81\x83\x86a\x12\xCEV[PP\x91\x83\x01\x91`\x01\x91\x82\x01\x91\x01a\x14\xFBV[PPPPPPPPV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x15NWa\x15Na\x11qV[a\x15b\x81a\x15\\\x84Ta\x10\xB5V[\x84a\x12\x8DV[` \x80`\x1F\x83\x11`\x01\x81\x14a\x15\xB5W`\0\x84\x15a\x15\x7FWP\x85\x83\x01Q[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x03\x86\x90\x1B\x1C\x19\x16`\x01\x85\x90\x1B\x17\x85Ua\x16JV[`\0\x85\x81R` \x81 \x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x86\x16\x91[\x82\x81\x10\x15a\x16\x02W\x88\x86\x01Q\x82U\x94\x84\x01\x94`\x01\x90\x91\x01\x90\x84\x01a\x15\xE3V[P\x85\x82\x10\x15a\x16>W\x87\x85\x01Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x03\x88\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PP`\x01\x84`\x01\x1B\x01\x85U[PPPPPPV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16\x81R`@` \x82\x01R\x81`@\x82\x01R\x81\x83``\x83\x017`\0\x81\x83\x01``\x90\x81\x01\x91\x90\x91R`\x1F\x90\x92\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x16\x01\x01\x92\x91PPV",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561001057600080fd5b50600436106100a35760003560e01c8063715018a611610076578063c8d178b21161005b578063c8d178b214610162578063f2fde38b14610175578063fe52f7961461018857600080fd5b8063715018a6146101305780638da5cb5b1461013a57600080fd5b80630e666e49146100a857806333cf520c146100d057806351ca7a9f146100f05780636f77926b14610110575b600080fd5b6100bb6100b6366004610d9a565b61019b565b60405190151581526020015b60405180910390f35b6100e36100de366004610d9a565b6101db565b6040516100c79190610ea6565b6101036100fe366004610d9a565b610438565b6040516100c79190610eb9565b61012361011e366004610d9a565b610707565b6040516100c79190610f2e565b61013861082d565b005b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100c7565b610138610170366004610fd0565b610841565b610138610183366004610d9a565b610aa9565b610138610196366004611078565b610b12565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260016020819052604082200180548291906101d1906110b5565b9050119050919050565b60408051602081019091526060815273ffffffffffffffffffffffffffffffffffffffff8216600090815260016020908152604080832081518154606094810282018501845292810183815290939192849284919084018282801561025f57602002820191906000526020600020905b81548152602001906001019080831161024b575b50505050508152602001600182018054610278906110b5565b80601f01602080910402602001604051908101604052809291908181526020018280546102a4906110b5565b80156102f15780601f106102c6576101008083540402835291602001916102f1565b820191906000526020600020905b8154815290600101906020018083116102d457829003601f168201915b50505050508152505090506000816000015160018360000151516103159190611102565b8151811061032557610325611142565b602002602001015190506002818154811061034257610342611142565b9060005260206000200160405180602001604052908160008201805480602002602001604051908101604052809291908181526020016000905b8282101561042857838290600052602060002001805461039b906110b5565b80601f01602080910402602001604051908101604052809291908181526020018280546103c7906110b5565b80156104145780601f106103e957610100808354040283529160200191610414565b820191906000526020600020905b8154815290600101906020018083116103f757829003601f168201915b50505050508152602001906001019061037c565b5050509152509095945050505050565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260016020908152604080832081518154938402810160609081018452928101848152929493909283918390838801828280156104af57602002820191906000526020600020905b81548152602001906001019080831161049b575b505050505081526020016001820180546104c8906110b5565b80601f01602080910402602001604051908101604052809291908181526020018280546104f4906110b5565b80156105415780601f1061051657610100808354040283529160200191610541565b820191906000526020600020905b81548152906001019060200180831161052457829003601f168201915b5050505050815250509050600081600001515167ffffffffffffffff81111561056c5761056c611171565b6040519080825280602002602001820160405280156105ac57816020015b60408051602081019091526060815281526020019060019003908161058a5790505b50905060005b8251518110156106ff576002836000015182815181106105d4576105d4611142565b6020026020010151815481106105ec576105ec611142565b9060005260206000200160405180602001604052908160008201805480602002602001604051908101604052809291908181526020016000905b828210156106d2578382906000526020600020018054610645906110b5565b80601f0160208091040260200160405190810160405280929190818152602001828054610671906110b5565b80156106be5780601f10610693576101008083540402835291602001916106be565b820191906000526020600020905b8154815290600101906020018083116106a157829003601f168201915b505050505081526020019060010190610626565b50505050815250508282815181106106ec576106ec611142565b60209081029190910101526001016105b2565b509392505050565b6040805180820182526060808252602080830182905273ffffffffffffffffffffffffffffffffffffffff85166000908152600182528490208451815492830281018401865294850182815293949390928492849184018282801561078b57602002820191906000526020600020905b815481526020019060010190808311610777575b505050505081526020016001820180546107a4906110b5565b80601f01602080910402602001604051908101604052809291908181526020018280546107d0906110b5565b801561081d5780601f106107f25761010080835404028352916020019161081d565b820191906000526020600020905b81548152906001019060200180831161080057829003601f168201915b5050505050815250509050919050565b610835610c49565b61083f6000610c9c565b565b610849610c49565b6000829003610884576040517ff969dd5900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61088e81806111a0565b90506000036108c9576040517f2bc32b1600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108d28461019b565b15610909576040517fc344397e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002805460018101825560009190915281907f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0161094782826113e8565b505060025460009061095b90600190611102565b604080516000818301908152606082018352815281516020601f880181900481028201810190935286815292935091818301918790879081908401838280828437600092018290525093909452505073ffffffffffffffffffffffffffffffffffffffff88168152600160209081526040909120835180519193506109e4928492910190610d11565b50602082015160018201906109f99082611534565b50505073ffffffffffffffffffffffffffffffffffffffff8516600090815260016020819052604090912001610a308486836112ce565b5073ffffffffffffffffffffffffffffffffffffffff85166000908152600160208181526040808420805493840181558452922001829055517f3d3d05375966308799f27583173d73adad0e9648aac96d354b0d554a6ea8d57490610a9a90879087908790611652565b60405180910390a15050505050565b610ab1610c49565b73ffffffffffffffffffffffffffffffffffffffff8116610b06576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024015b60405180910390fd5b610b0f81610c9c565b50565b610b1c81806111a0565b9050600003610b57576040517f2bc32b1600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b603361019b565b610b96576040517f907b361f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002805460018101825560009190915281907f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01610bd482826113e8565b5050600254600090610be890600190611102565b33600081815260016020818152604080842080549384018155845292200183905551919250907fd594e1a09354af093e9bba3f535456e7e5b0345990e37c37e9c41bb57b9912ca90610c3d9084815260200190565b60405180910390a25050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461083f576040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152602401610afd565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054828255906000526020600020908101928215610d4c579160200282015b82811115610d4c578251825591602001919060010190610d31565b50610d58929150610d5c565b5090565b5b80821115610d585760008155600101610d5d565b803573ffffffffffffffffffffffffffffffffffffffff81168114610d9557600080fd5b919050565b600060208284031215610dac57600080fd5b610db582610d71565b9392505050565b6000815180845260005b81811015610de257602081850181015186830182015201610dc6565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b6000602080840183516020865281815180845260408801915060408160051b890101935060208301925060005b81811015610e99577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0898603018352610e87858551610dbc565b94509285019291850191600101610e4d565b5092979650505050505050565b602081526000610db56020830184610e20565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b82811015610e99577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452610f1c858351610e20565b94509285019290850190600101610ee2565b6020808252825160408383015280516060840181905260009291820190839060808601905b80831015610f735783518252928401926001929092019190840190610f53565b50928601518584037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001604087015292610fad8185610dbc565b979650505050505050565b600060208284031215610fca57600080fd5b50919050565b60008060008060608587031215610fe657600080fd5b610fef85610d71565b9350602085013567ffffffffffffffff8082111561100c57600080fd5b818701915087601f83011261102057600080fd5b81358181111561102f57600080fd5b88602082850101111561104157600080fd5b60208301955080945050604087013591508082111561105f57600080fd5b5061106c87828801610fb8565b91505092959194509250565b60006020828403121561108a57600080fd5b813567ffffffffffffffff8111156110a157600080fd5b6110ad84828501610fb8565b949350505050565b600181811c908216806110c957607f821691505b602082108103610fca577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b8181038181111561113c577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126111d557600080fd5b83018035915067ffffffffffffffff8211156111f057600080fd5b6020019150600581901b360382131561120857600080fd5b9250929050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261124457600080fd5b83018035915067ffffffffffffffff82111561125f57600080fd5b60200191503681900382131561120857600080fd5b5b818110156112895760008155600101611275565b5050565b601f8211156112c957806000526020600020601f840160051c810160208510156112b45750805b6112c6601f850160051c830182611274565b50505b505050565b67ffffffffffffffff8311156112e6576112e6611171565b6112fa836112f483546110b5565b8361128d565b6000601f84116001811461134c57600085156113165750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b1783556112c6565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b8281101561139b578685013582556020948501946001909201910161137b565b50868210156113d6577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b81357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe183360301811261141a57600080fd5b8201803567ffffffffffffffff81111561143357600080fd5b602091820191600582811b360384131561144c57600080fd5b6801000000000000000083111561146557611465611171565b8454838655808410156114ed576000868152602081208581019083015b808210156114e95761149482546110b5565b80156114dd57601f808211600181146114af578585556114da565b6000858152602090206114cb8385018a1c820160018301611274565b50600085815260208120818755555b50505b50600182019150611482565b5050505b505060008481526020812084915b8481101561152a5761150d838761120f565b6115188183866112ce565b505091830191600191820191016114fb565b5050505050505050565b815167ffffffffffffffff81111561154e5761154e611171565b6115628161155c84546110b5565b8461128d565b602080601f8311600181146115b5576000841561157f5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b17855561164a565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b82811015611602578886015182559484019460019091019084016115e3565b508582101561163e57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b505060018460011b0185555b505050505050565b73ffffffffffffffffffffffffffffffffffffffff8416815260406020820152816040820152818360608301376000818301606090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01601019291505056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0\xA3W`\x005`\xE0\x1C\x80cqP\x18\xA6\x11a\0vW\x80c\xC8\xD1x\xB2\x11a\0[W\x80c\xC8\xD1x\xB2\x14a\x01bW\x80c\xF2\xFD\xE3\x8B\x14a\x01uW\x80c\xFER\xF7\x96\x14a\x01\x88W`\0\x80\xFD[\x80cqP\x18\xA6\x14a\x010W\x80c\x8D\xA5\xCB[\x14a\x01:W`\0\x80\xFD[\x80c\x0EfnI\x14a\0\xA8W\x80c3\xCFR\x0C\x14a\0\xD0W\x80cQ\xCAz\x9F\x14a\0\xF0W\x80cow\x92k\x14a\x01\x10W[`\0\x80\xFD[a\0\xBBa\0\xB66`\x04a\r\x9AV[a\x01\x9BV[`@Q\x90\x15\x15\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\0\xE3a\0\xDE6`\x04a\r\x9AV[a\x01\xDBV[`@Qa\0\xC7\x91\x90a\x0E\xA6V[a\x01\x03a\0\xFE6`\x04a\r\x9AV[a\x048V[`@Qa\0\xC7\x91\x90a\x0E\xB9V[a\x01#a\x01\x1E6`\x04a\r\x9AV[a\x07\x07V[`@Qa\0\xC7\x91\x90a\x0F.V[a\x018a\x08-V[\0[`\0T`@Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16\x81R` \x01a\0\xC7V[a\x018a\x01p6`\x04a\x0F\xD0V[a\x08AV[a\x018a\x01\x836`\x04a\r\x9AV[a\n\xA9V[a\x018a\x01\x966`\x04a\x10xV[a\x0B\x12V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16`\0\x90\x81R`\x01` \x81\x90R`@\x82 \x01\x80T\x82\x91\x90a\x01\xD1\x90a\x10\xB5V[\x90P\x11\x90P\x91\x90PV[`@\x80Q` \x81\x01\x90\x91R``\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16`\0\x90\x81R`\x01` \x90\x81R`@\x80\x83 \x81Q\x81T``\x94\x81\x02\x82\x01\x85\x01\x84R\x92\x81\x01\x83\x81R\x90\x93\x91\x92\x84\x92\x84\x91\x90\x84\x01\x82\x82\x80\x15a\x02_W` \x02\x82\x01\x91\x90`\0R` `\0 \x90[\x81T\x81R` \x01\x90`\x01\x01\x90\x80\x83\x11a\x02KW[PPPPP\x81R` \x01`\x01\x82\x01\x80Ta\x02x\x90a\x10\xB5V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x02\xA4\x90a\x10\xB5V[\x80\x15a\x02\xF1W\x80`\x1F\x10a\x02\xC6Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x02\xF1V[\x82\x01\x91\x90`\0R` `\0 \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x02\xD4W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81RPP\x90P`\0\x81`\0\x01Q`\x01\x83`\0\x01QQa\x03\x15\x91\x90a\x11\x02V[\x81Q\x81\x10a\x03%Wa\x03%a\x11BV[` \x02` \x01\x01Q\x90P`\x02\x81\x81T\x81\x10a\x03BWa\x03Ba\x11BV[\x90`\0R` `\0 \x01`@Q\x80` \x01`@R\x90\x81`\0\x82\x01\x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01`\0\x90[\x82\x82\x10\x15a\x04(W\x83\x82\x90`\0R` `\0 \x01\x80Ta\x03\x9B\x90a\x10\xB5V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x03\xC7\x90a\x10\xB5V[\x80\x15a\x04\x14W\x80`\x1F\x10a\x03\xE9Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x04\x14V[\x82\x01\x91\x90`\0R` `\0 \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x03\xF7W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81R` \x01\x90`\x01\x01\x90a\x03|V[PPP\x91RP\x90\x95\x94PPPPPV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16`\0\x90\x81R`\x01` \x90\x81R`@\x80\x83 \x81Q\x81T\x93\x84\x02\x81\x01``\x90\x81\x01\x84R\x92\x81\x01\x84\x81R\x92\x94\x93\x90\x92\x83\x91\x83\x90\x83\x88\x01\x82\x82\x80\x15a\x04\xAFW` \x02\x82\x01\x91\x90`\0R` `\0 \x90[\x81T\x81R` \x01\x90`\x01\x01\x90\x80\x83\x11a\x04\x9BW[PPPPP\x81R` \x01`\x01\x82\x01\x80Ta\x04\xC8\x90a\x10\xB5V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x04\xF4\x90a\x10\xB5V[\x80\x15a\x05AW\x80`\x1F\x10a\x05\x16Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x05AV[\x82\x01\x91\x90`\0R` `\0 \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x05$W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81RPP\x90P`\0\x81`\0\x01QQg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x05lWa\x05la\x11qV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x05\xACW\x81` \x01[`@\x80Q` \x81\x01\x90\x91R``\x81R\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x05\x8AW\x90P[P\x90P`\0[\x82QQ\x81\x10\x15a\x06\xFFW`\x02\x83`\0\x01Q\x82\x81Q\x81\x10a\x05\xD4Wa\x05\xD4a\x11BV[` \x02` \x01\x01Q\x81T\x81\x10a\x05\xECWa\x05\xECa\x11BV[\x90`\0R` `\0 \x01`@Q\x80` \x01`@R\x90\x81`\0\x82\x01\x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01`\0\x90[\x82\x82\x10\x15a\x06\xD2W\x83\x82\x90`\0R` `\0 \x01\x80Ta\x06E\x90a\x10\xB5V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x06q\x90a\x10\xB5V[\x80\x15a\x06\xBEW\x80`\x1F\x10a\x06\x93Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x06\xBEV[\x82\x01\x91\x90`\0R` `\0 \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x06\xA1W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81R` \x01\x90`\x01\x01\x90a\x06&V[PPPP\x81RPP\x82\x82\x81Q\x81\x10a\x06\xECWa\x06\xECa\x11BV[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x05\xB2V[P\x93\x92PPPV[`@\x80Q\x80\x82\x01\x82R``\x80\x82R` \x80\x83\x01\x82\x90Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x16`\0\x90\x81R`\x01\x82R\x84\x90 \x84Q\x81T\x92\x83\x02\x81\x01\x84\x01\x86R\x94\x85\x01\x82\x81R\x93\x94\x93\x90\x92\x84\x92\x84\x91\x84\x01\x82\x82\x80\x15a\x07\x8BW` \x02\x82\x01\x91\x90`\0R` `\0 \x90[\x81T\x81R` \x01\x90`\x01\x01\x90\x80\x83\x11a\x07wW[PPPPP\x81R` \x01`\x01\x82\x01\x80Ta\x07\xA4\x90a\x10\xB5V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x07\xD0\x90a\x10\xB5V[\x80\x15a\x08\x1DW\x80`\x1F\x10a\x07\xF2Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x08\x1DV[\x82\x01\x91\x90`\0R` `\0 \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x08\0W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81RPP\x90P\x91\x90PV[a\x085a\x0CIV[a\x08?`\0a\x0C\x9CV[V[a\x08Ia\x0CIV[`\0\x82\x90\x03a\x08\x84W`@Q\x7F\xF9i\xDDY\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\x08\x8E\x81\x80a\x11\xA0V[\x90P`\0\x03a\x08\xC9W`@Q\x7F+\xC3+\x16\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\x08\xD2\x84a\x01\x9BV[\x15a\t\tW`@Q\x7F\xC3D9~\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x02\x80T`\x01\x81\x01\x82U`\0\x91\x90\x91R\x81\x90\x7F@W\x87\xFA\x12\xA8#\xE0\xF2\xB7c\x1C\xC4\x1B;\xA8\x82\x8B3!\xCA\x81\x11\x11\xFAu\xCD:\xA3\xBBZ\xCE\x01a\tG\x82\x82a\x13\xE8V[PP`\x02T`\0\x90a\t[\x90`\x01\x90a\x11\x02V[`@\x80Q`\0\x81\x83\x01\x90\x81R``\x82\x01\x83R\x81R\x81Q` `\x1F\x88\x01\x81\x90\x04\x81\x02\x82\x01\x81\x01\x90\x93R\x86\x81R\x92\x93P\x91\x81\x83\x01\x91\x87\x90\x87\x90\x81\x90\x84\x01\x83\x82\x80\x82\x847`\0\x92\x01\x82\x90RP\x93\x90\x94RPPs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x88\x16\x81R`\x01` \x90\x81R`@\x90\x91 \x83Q\x80Q\x91\x93Pa\t\xE4\x92\x84\x92\x91\x01\x90a\r\x11V[P` \x82\x01Q`\x01\x82\x01\x90a\t\xF9\x90\x82a\x154V[PPPs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x16`\0\x90\x81R`\x01` \x81\x90R`@\x90\x91 \x01a\n0\x84\x86\x83a\x12\xCEV[Ps\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x16`\0\x90\x81R`\x01` \x81\x81R`@\x80\x84 \x80T\x93\x84\x01\x81U\x84R\x92 \x01\x82\x90UQ\x7F==\x057Yf0\x87\x99\xF2u\x83\x17=s\xAD\xAD\x0E\x96H\xAA\xC9m5K\rUJn\xA8\xD5t\x90a\n\x9A\x90\x87\x90\x87\x90\x87\x90a\x16RV[`@Q\x80\x91\x03\x90\xA1PPPPPV[a\n\xB1a\x0CIV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16a\x0B\x06W`@Q\x7F\x1EO\xBD\xF7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\0`\x04\x82\x01R`$\x01[`@Q\x80\x91\x03\x90\xFD[a\x0B\x0F\x81a\x0C\x9CV[PV[a\x0B\x1C\x81\x80a\x11\xA0V[\x90P`\0\x03a\x0BWW`@Q\x7F+\xC3+\x16\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\x0B`3a\x01\x9BV[a\x0B\x96W`@Q\x7F\x90{6\x1F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x02\x80T`\x01\x81\x01\x82U`\0\x91\x90\x91R\x81\x90\x7F@W\x87\xFA\x12\xA8#\xE0\xF2\xB7c\x1C\xC4\x1B;\xA8\x82\x8B3!\xCA\x81\x11\x11\xFAu\xCD:\xA3\xBBZ\xCE\x01a\x0B\xD4\x82\x82a\x13\xE8V[PP`\x02T`\0\x90a\x0B\xE8\x90`\x01\x90a\x11\x02V[3`\0\x81\x81R`\x01` \x81\x81R`@\x80\x84 \x80T\x93\x84\x01\x81U\x84R\x92 \x01\x83\x90UQ\x91\x92P\x90\x7F\xD5\x94\xE1\xA0\x93T\xAF\t>\x9B\xBA?STV\xE7\xE5\xB04Y\x90\xE3|7\xE9\xC4\x1B\xB5{\x99\x12\xCA\x90a\x0C=\x90\x84\x81R` \x01\x90V[`@Q\x80\x91\x03\x90\xA2PPV[`\0Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163\x14a\x08?W`@Q\x7F\x11\x8C\xDA\xA7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R3`\x04\x82\x01R`$\x01a\n\xFDV[`\0\x80Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83\x16\x81\x17\x84U`@Q\x91\x90\x92\x16\x92\x83\x91\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x91\x90\xA3PPV[\x82\x80T\x82\x82U\x90`\0R` `\0 \x90\x81\x01\x92\x82\x15a\rLW\x91` \x02\x82\x01[\x82\x81\x11\x15a\rLW\x82Q\x82U\x91` \x01\x91\x90`\x01\x01\x90a\r1V[Pa\rX\x92\x91Pa\r\\V[P\x90V[[\x80\x82\x11\x15a\rXW`\0\x81U`\x01\x01a\r]V[\x805s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\r\x95W`\0\x80\xFD[\x91\x90PV[`\0` \x82\x84\x03\x12\x15a\r\xACW`\0\x80\xFD[a\r\xB5\x82a\rqV[\x93\x92PPPV[`\0\x81Q\x80\x84R`\0[\x81\x81\x10\x15a\r\xE2W` \x81\x85\x01\x81\x01Q\x86\x83\x01\x82\x01R\x01a\r\xC6V[P`\0` \x82\x86\x01\x01R` \x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[`\0` \x80\x84\x01\x83Q` \x86R\x81\x81Q\x80\x84R`@\x88\x01\x91P`@\x81`\x05\x1B\x89\x01\x01\x93P` \x83\x01\x92P`\0[\x81\x81\x10\x15a\x0E\x99W\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xC0\x89\x86\x03\x01\x83Ra\x0E\x87\x85\x85Qa\r\xBCV[\x94P\x92\x85\x01\x92\x91\x85\x01\x91`\x01\x01a\x0EMV[P\x92\x97\x96PPPPPPPV[` \x81R`\0a\r\xB5` \x83\x01\x84a\x0E V[`\0` \x80\x83\x01` \x84R\x80\x85Q\x80\x83R`@\x86\x01\x91P`@\x81`\x05\x1B\x87\x01\x01\x92P` \x87\x01`\0[\x82\x81\x10\x15a\x0E\x99W\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xC0\x88\x86\x03\x01\x84Ra\x0F\x1C\x85\x83Qa\x0E V[\x94P\x92\x85\x01\x92\x90\x85\x01\x90`\x01\x01a\x0E\xE2V[` \x80\x82R\x82Q`@\x83\x83\x01R\x80Q``\x84\x01\x81\x90R`\0\x92\x91\x82\x01\x90\x83\x90`\x80\x86\x01\x90[\x80\x83\x10\x15a\x0FsW\x83Q\x82R\x92\x84\x01\x92`\x01\x92\x90\x92\x01\x91\x90\x84\x01\x90a\x0FSV[P\x92\x86\x01Q\x85\x84\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x01`@\x87\x01R\x92a\x0F\xAD\x81\x85a\r\xBCV[\x97\x96PPPPPPPV[`\0` \x82\x84\x03\x12\x15a\x0F\xCAW`\0\x80\xFD[P\x91\x90PV[`\0\x80`\0\x80``\x85\x87\x03\x12\x15a\x0F\xE6W`\0\x80\xFD[a\x0F\xEF\x85a\rqV[\x93P` \x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x10\x0CW`\0\x80\xFD[\x81\x87\x01\x91P\x87`\x1F\x83\x01\x12a\x10 W`\0\x80\xFD[\x815\x81\x81\x11\x15a\x10/W`\0\x80\xFD[\x88` \x82\x85\x01\x01\x11\x15a\x10AW`\0\x80\xFD[` \x83\x01\x95P\x80\x94PP`@\x87\x015\x91P\x80\x82\x11\x15a\x10_W`\0\x80\xFD[Pa\x10l\x87\x82\x88\x01a\x0F\xB8V[\x91PP\x92\x95\x91\x94P\x92PV[`\0` \x82\x84\x03\x12\x15a\x10\x8AW`\0\x80\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x10\xA1W`\0\x80\xFD[a\x10\xAD\x84\x82\x85\x01a\x0F\xB8V[\x94\x93PPPPV[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x10\xC9W`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x0F\xCAW\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\"`\x04R`$`\0\xFD[\x81\x81\x03\x81\x81\x11\x15a\x11<W\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\x11`\x04R`$`\0\xFD[\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`2`\x04R`$`\0\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`A`\x04R`$`\0\xFD[`\0\x80\x835\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE1\x846\x03\x01\x81\x12a\x11\xD5W`\0\x80\xFD[\x83\x01\x805\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x11\xF0W`\0\x80\xFD[` \x01\x91P`\x05\x81\x90\x1B6\x03\x82\x13\x15a\x12\x08W`\0\x80\xFD[\x92P\x92\x90PV[`\0\x80\x835\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE1\x846\x03\x01\x81\x12a\x12DW`\0\x80\xFD[\x83\x01\x805\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x12_W`\0\x80\xFD[` \x01\x91P6\x81\x90\x03\x82\x13\x15a\x12\x08W`\0\x80\xFD[[\x81\x81\x10\x15a\x12\x89W`\0\x81U`\x01\x01a\x12uV[PPV[`\x1F\x82\x11\x15a\x12\xC9W\x80`\0R` `\0 `\x1F\x84\x01`\x05\x1C\x81\x01` \x85\x10\x15a\x12\xB4WP\x80[a\x12\xC6`\x1F\x85\x01`\x05\x1C\x83\x01\x82a\x12tV[PP[PPPV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11\x15a\x12\xE6Wa\x12\xE6a\x11qV[a\x12\xFA\x83a\x12\xF4\x83Ta\x10\xB5V[\x83a\x12\x8DV[`\0`\x1F\x84\x11`\x01\x81\x14a\x13LW`\0\x85\x15a\x13\x16WP\x83\x82\x015[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x03\x87\x90\x1B\x1C\x19\x16`\x01\x86\x90\x1B\x17\x83Ua\x12\xC6V[`\0\x83\x81R` \x90 \x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x86\x16\x90\x83[\x82\x81\x10\x15a\x13\x9BW\x86\x85\x015\x82U` \x94\x85\x01\x94`\x01\x90\x92\x01\x91\x01a\x13{V[P\x86\x82\x10\x15a\x13\xD6W\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\xF8\x88`\x03\x1B\x16\x1C\x19\x84\x87\x015\x16\x81U[PP`\x01\x85`\x01\x1B\x01\x83UPPPPPV[\x815\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE1\x836\x03\x01\x81\x12a\x14\x1AW`\0\x80\xFD[\x82\x01\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x143W`\0\x80\xFD[` \x91\x82\x01\x91`\x05\x82\x81\x1B6\x03\x84\x13\x15a\x14LW`\0\x80\xFD[h\x01\0\0\0\0\0\0\0\0\x83\x11\x15a\x14eWa\x14ea\x11qV[\x84T\x83\x86U\x80\x84\x10\x15a\x14\xEDW`\0\x86\x81R` \x81 \x85\x81\x01\x90\x83\x01[\x80\x82\x10\x15a\x14\xE9Wa\x14\x94\x82Ta\x10\xB5V[\x80\x15a\x14\xDDW`\x1F\x80\x82\x11`\x01\x81\x14a\x14\xAFW\x85\x85Ua\x14\xDAV[`\0\x85\x81R` \x90 a\x14\xCB\x83\x85\x01\x8A\x1C\x82\x01`\x01\x83\x01a\x12tV[P`\0\x85\x81R` \x81 \x81\x87UU[PP[P`\x01\x82\x01\x91Pa\x14\x82V[PPP[PP`\0\x84\x81R` \x81 \x84\x91[\x84\x81\x10\x15a\x15*Wa\x15\r\x83\x87a\x12\x0FV[a\x15\x18\x81\x83\x86a\x12\xCEV[PP\x91\x83\x01\x91`\x01\x91\x82\x01\x91\x01a\x14\xFBV[PPPPPPPPV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x15NWa\x15Na\x11qV[a\x15b\x81a\x15\\\x84Ta\x10\xB5V[\x84a\x12\x8DV[` \x80`\x1F\x83\x11`\x01\x81\x14a\x15\xB5W`\0\x84\x15a\x15\x7FWP\x85\x83\x01Q[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x03\x86\x90\x1B\x1C\x19\x16`\x01\x85\x90\x1B\x17\x85Ua\x16JV[`\0\x85\x81R` \x81 \x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x86\x16\x91[\x82\x81\x10\x15a\x16\x02W\x88\x86\x01Q\x82U\x94\x84\x01\x94`\x01\x90\x91\x01\x90\x84\x01a\x15\xE3V[P\x85\x82\x10\x15a\x16>W\x87\x85\x01Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x03\x88\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PP`\x01\x84`\x01\x1B\x01\x85U[PPPPPPV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16\x81R`@` \x82\x01R\x81`@\x82\x01R\x81\x83``\x83\x017`\0\x81\x83\x01``\x90\x81\x01\x91\x90\x91R`\x1F\x90\x92\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x16\x01\x01\x92\x91PPV",
    );
    /**```solidity
struct KeyPackage { bytes[] data; }
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct KeyPackage {
        pub data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<KeyPackage> for UnderlyingRustTuple<'_> {
            fn from(value: KeyPackage) -> Self {
                (value.data,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for KeyPackage {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { data: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for KeyPackage {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for KeyPackage {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.data),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for KeyPackage {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for KeyPackage {
            const NAME: &'static str = "KeyPackage";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed("KeyPackage(bytes[] data)")
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                <alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::Bytes,
                > as alloy_sol_types::SolType>::eip712_data_word(&self.data)
                    .0
                    .to_vec()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for KeyPackage {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.data)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::Bytes,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.data,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct UserInfo { uint256[] keyPackageIndices; bytes signaturePubKey; }
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct UserInfo {
        pub keyPackageIndices: alloy::sol_types::private::Vec<
            alloy::sol_types::private::U256,
        >,
        pub signaturePubKey: alloy::sol_types::private::Bytes,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            alloy::sol_types::sol_data::Bytes,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Vec<alloy::sol_types::private::U256>,
            alloy::sol_types::private::Bytes,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UserInfo> for UnderlyingRustTuple<'_> {
            fn from(value: UserInfo) -> Self {
                (value.keyPackageIndices, value.signaturePubKey)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for UserInfo {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    keyPackageIndices: tuple.0,
                    signaturePubKey: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for UserInfo {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for UserInfo {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(&self.keyPackageIndices),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.signaturePubKey,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for UserInfo {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for UserInfo {
            const NAME: &'static str = "UserInfo";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "UserInfo(uint256[] keyPackageIndices,bytes signaturePubKey)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.keyPackageIndices,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::eip712_data_word(
                            &self.signaturePubKey,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for UserInfo {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.keyPackageIndices,
                    )
                    + <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.signaturePubKey,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::Uint<256>,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.keyPackageIndices,
                    out,
                );
                <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.signaturePubKey,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Custom error with signature `MalformedKeyPackage()` and selector `0x2bc32b16`.
```solidity
error MalformedKeyPackage();
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct MalformedKeyPackage {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<MalformedKeyPackage> for UnderlyingRustTuple<'_> {
            fn from(value: MalformedKeyPackage) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for MalformedKeyPackage {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for MalformedKeyPackage {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "MalformedKeyPackage()";
            const SELECTOR: [u8; 4] = [43u8, 195u8, 43u8, 22u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `MalformedUserInfo()` and selector `0xf969dd59`.
```solidity
error MalformedUserInfo();
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct MalformedUserInfo {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<MalformedUserInfo> for UnderlyingRustTuple<'_> {
            fn from(value: MalformedUserInfo) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for MalformedUserInfo {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for MalformedUserInfo {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "MalformedUserInfo()";
            const SELECTOR: [u8; 4] = [249u8, 105u8, 221u8, 89u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `UserAlreadyExists()` and selector `0xc344397e`.
```solidity
error UserAlreadyExists();
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct UserAlreadyExists {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UserAlreadyExists> for UnderlyingRustTuple<'_> {
            fn from(value: UserAlreadyExists) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for UserAlreadyExists {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for UserAlreadyExists {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "UserAlreadyExists()";
            const SELECTOR: [u8; 4] = [195u8, 68u8, 57u8, 126u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `UserDoesNotExist()` and selector `0x907b361f`.
```solidity
error UserDoesNotExist();
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct UserDoesNotExist {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UserDoesNotExist> for UnderlyingRustTuple<'_> {
            fn from(value: UserDoesNotExist) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for UserDoesNotExist {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for UserDoesNotExist {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "UserDoesNotExist()";
            const SELECTOR: [u8; 4] = [144u8, 123u8, 54u8, 31u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `UserAdded(address,bytes)` and selector `0x3d3d05375966308799f27583173d73adad0e9648aac96d354b0d554a6ea8d574`.
```solidity
event UserAdded(address user, bytes signaturePubKey);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    #[derive(Clone)]
    pub struct UserAdded {
        #[allow(missing_docs)]
        pub user: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub signaturePubKey: alloy::sol_types::private::Bytes,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for UserAdded {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "UserAdded(address,bytes)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                61u8,
                61u8,
                5u8,
                55u8,
                89u8,
                102u8,
                48u8,
                135u8,
                153u8,
                242u8,
                117u8,
                131u8,
                23u8,
                61u8,
                115u8,
                173u8,
                173u8,
                14u8,
                150u8,
                72u8,
                170u8,
                201u8,
                109u8,
                53u8,
                75u8,
                13u8,
                85u8,
                74u8,
                110u8,
                168u8,
                213u8,
                116u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    user: data.0,
                    signaturePubKey: data.1,
                }
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.user,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.signaturePubKey,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for UserAdded {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&UserAdded> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &UserAdded) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `UserKeyPackageAdded(address,uint256)` and selector `0xd594e1a09354af093e9bba3f535456e7e5b0345990e37c37e9c41bb57b9912ca`.
```solidity
event UserKeyPackageAdded(address indexed user, uint256 index);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    #[derive(Clone)]
    pub struct UserKeyPackageAdded {
        #[allow(missing_docs)]
        pub user: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub index: alloy::sol_types::private::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for UserKeyPackageAdded {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "UserKeyPackageAdded(address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                213u8,
                148u8,
                225u8,
                160u8,
                147u8,
                84u8,
                175u8,
                9u8,
                62u8,
                155u8,
                186u8,
                63u8,
                83u8,
                84u8,
                86u8,
                231u8,
                229u8,
                176u8,
                52u8,
                89u8,
                144u8,
                227u8,
                124u8,
                55u8,
                233u8,
                196u8,
                27u8,
                181u8,
                123u8,
                153u8,
                18u8,
                202u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    user: topics.1,
                    index: data.0,
                }
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.index),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.user.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.user,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for UserKeyPackageAdded {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&UserKeyPackageAdded> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &UserKeyPackageAdded) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address initialOwner);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub initialOwner: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.initialOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { initialOwner: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.initialOwner,
                    ),
                )
            }
        }
    };
    /**Function with signature `addKeyPackage((bytes[]))` and selector `0xfe52f796`.
```solidity
function addKeyPackage(KeyPackage memory keyPackage) external;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct addKeyPackageCall {
        pub keyPackage: <KeyPackage as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`addKeyPackage((bytes[]))`](addKeyPackageCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct addKeyPackageReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (KeyPackage,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <KeyPackage as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addKeyPackageCall> for UnderlyingRustTuple<'_> {
                fn from(value: addKeyPackageCall) -> Self {
                    (value.keyPackage,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addKeyPackageCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { keyPackage: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addKeyPackageReturn> for UnderlyingRustTuple<'_> {
                fn from(value: addKeyPackageReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addKeyPackageReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addKeyPackageCall {
            type Parameters<'a> = (KeyPackage,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addKeyPackageReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addKeyPackage((bytes[]))";
            const SELECTOR: [u8; 4] = [254u8, 82u8, 247u8, 150u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<KeyPackage as alloy_sol_types::SolType>::tokenize(&self.keyPackage),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `addUser(address,bytes,(bytes[]))` and selector `0xc8d178b2`.
```solidity
function addUser(address user, bytes memory signaturePubKey, KeyPackage memory keyPackage) external;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct addUserCall {
        pub user: alloy::sol_types::private::Address,
        pub signaturePubKey: alloy::sol_types::private::Bytes,
        pub keyPackage: <KeyPackage as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`addUser(address,bytes,(bytes[]))`](addUserCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct addUserReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
                KeyPackage,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
                <KeyPackage as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addUserCall> for UnderlyingRustTuple<'_> {
                fn from(value: addUserCall) -> Self {
                    (value.user, value.signaturePubKey, value.keyPackage)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addUserCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        user: tuple.0,
                        signaturePubKey: tuple.1,
                        keyPackage: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addUserReturn> for UnderlyingRustTuple<'_> {
                fn from(value: addUserReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addUserReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addUserCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
                KeyPackage,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addUserReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addUser(address,bytes,(bytes[]))";
            const SELECTOR: [u8; 4] = [200u8, 209u8, 120u8, 178u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.user,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.signaturePubKey,
                    ),
                    <KeyPackage as alloy_sol_types::SolType>::tokenize(&self.keyPackage),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getAllKeyPackagesForUser(address)` and selector `0x51ca7a9f`.
```solidity
function getAllKeyPackagesForUser(address user) external view returns (KeyPackage[] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct getAllKeyPackagesForUserCall {
        pub user: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`getAllKeyPackagesForUser(address)`](getAllKeyPackagesForUserCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct getAllKeyPackagesForUserReturn {
        pub _0: alloy::sol_types::private::Vec<
            <KeyPackage as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAllKeyPackagesForUserCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAllKeyPackagesForUserCall) -> Self {
                    (value.user,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAllKeyPackagesForUserCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { user: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<KeyPackage>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    <KeyPackage as alloy::sol_types::SolType>::RustType,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAllKeyPackagesForUserReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAllKeyPackagesForUserReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAllKeyPackagesForUserReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getAllKeyPackagesForUserCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getAllKeyPackagesForUserReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Array<KeyPackage>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getAllKeyPackagesForUser(address)";
            const SELECTOR: [u8; 4] = [81u8, 202u8, 122u8, 159u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.user,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getAvailableKeyPackage(address)` and selector `0x33cf520c`.
```solidity
function getAvailableKeyPackage(address user) external view returns (KeyPackage memory);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct getAvailableKeyPackageCall {
        pub user: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`getAvailableKeyPackage(address)`](getAvailableKeyPackageCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct getAvailableKeyPackageReturn {
        pub _0: <KeyPackage as alloy::sol_types::SolType>::RustType,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAvailableKeyPackageCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAvailableKeyPackageCall) -> Self {
                    (value.user,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAvailableKeyPackageCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { user: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (KeyPackage,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <KeyPackage as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAvailableKeyPackageReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAvailableKeyPackageReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAvailableKeyPackageReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getAvailableKeyPackageCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getAvailableKeyPackageReturn;
            type ReturnTuple<'a> = (KeyPackage,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getAvailableKeyPackage(address)";
            const SELECTOR: [u8; 4] = [51u8, 207u8, 82u8, 12u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.user,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getUser(address)` and selector `0x6f77926b`.
```solidity
function getUser(address user) external view returns (UserInfo memory);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct getUserCall {
        pub user: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`getUser(address)`](getUserCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct getUserReturn {
        pub _0: <UserInfo as alloy::sol_types::SolType>::RustType,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getUserCall> for UnderlyingRustTuple<'_> {
                fn from(value: getUserCall) -> Self {
                    (value.user,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getUserCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { user: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (UserInfo,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <UserInfo as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getUserReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getUserReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getUserReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getUserCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getUserReturn;
            type ReturnTuple<'a> = (UserInfo,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getUser(address)";
            const SELECTOR: [u8; 4] = [111u8, 119u8, 146u8, 107u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.user,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct ownerReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall {}
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `userExists(address)` and selector `0x0e666e49`.
```solidity
function userExists(address user) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct userExistsCall {
        pub user: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`userExists(address)`](userExistsCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct userExistsReturn {
        pub _0: bool,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<userExistsCall> for UnderlyingRustTuple<'_> {
                fn from(value: userExistsCall) -> Self {
                    (value.user,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for userExistsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { user: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<userExistsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: userExistsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for userExistsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for userExistsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = userExistsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "userExists(address)";
            const SELECTOR: [u8; 4] = [14u8, 102u8, 110u8, 73u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.user,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`ScKeystore`](self) function calls.
    pub enum ScKeystoreCalls {
        addKeyPackage(addKeyPackageCall),
        addUser(addUserCall),
        getAllKeyPackagesForUser(getAllKeyPackagesForUserCall),
        getAvailableKeyPackage(getAvailableKeyPackageCall),
        getUser(getUserCall),
        owner(ownerCall),
        renounceOwnership(renounceOwnershipCall),
        transferOwnership(transferOwnershipCall),
        userExists(userExistsCall),
    }
    #[automatically_derived]
    impl ScKeystoreCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [14u8, 102u8, 110u8, 73u8],
            [51u8, 207u8, 82u8, 12u8],
            [81u8, 202u8, 122u8, 159u8],
            [111u8, 119u8, 146u8, 107u8],
            [113u8, 80u8, 24u8, 166u8],
            [141u8, 165u8, 203u8, 91u8],
            [200u8, 209u8, 120u8, 178u8],
            [242u8, 253u8, 227u8, 139u8],
            [254u8, 82u8, 247u8, 150u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ScKeystoreCalls {
        const NAME: &'static str = "ScKeystoreCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 9usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::addKeyPackage(_) => {
                    <addKeyPackageCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::addUser(_) => <addUserCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::getAllKeyPackagesForUser(_) => {
                    <getAllKeyPackagesForUserCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getAvailableKeyPackage(_) => {
                    <getAvailableKeyPackageCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getUser(_) => <getUserCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::userExists(_) => {
                    <userExistsCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ScKeystoreCalls>] = &[
                {
                    fn userExists(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ScKeystoreCalls> {
                        <userExistsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ScKeystoreCalls::userExists)
                    }
                    userExists
                },
                {
                    fn getAvailableKeyPackage(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ScKeystoreCalls> {
                        <getAvailableKeyPackageCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ScKeystoreCalls::getAvailableKeyPackage)
                    }
                    getAvailableKeyPackage
                },
                {
                    fn getAllKeyPackagesForUser(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ScKeystoreCalls> {
                        <getAllKeyPackagesForUserCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ScKeystoreCalls::getAllKeyPackagesForUser)
                    }
                    getAllKeyPackagesForUser
                },
                {
                    fn getUser(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ScKeystoreCalls> {
                        <getUserCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ScKeystoreCalls::getUser)
                    }
                    getUser
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ScKeystoreCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ScKeystoreCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ScKeystoreCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ScKeystoreCalls::owner)
                    }
                    owner
                },
                {
                    fn addUser(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ScKeystoreCalls> {
                        <addUserCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ScKeystoreCalls::addUser)
                    }
                    addUser
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ScKeystoreCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ScKeystoreCalls::transferOwnership)
                    }
                    transferOwnership
                },
                {
                    fn addKeyPackage(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ScKeystoreCalls> {
                        <addKeyPackageCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ScKeystoreCalls::addKeyPackage)
                    }
                    addKeyPackage
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::addKeyPackage(inner) => {
                    <addKeyPackageCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::addUser(inner) => {
                    <addUserCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::getAllKeyPackagesForUser(inner) => {
                    <getAllKeyPackagesForUserCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getAvailableKeyPackage(inner) => {
                    <getAvailableKeyPackageCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getUser(inner) => {
                    <getUserCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::userExists(inner) => {
                    <userExistsCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::addKeyPackage(inner) => {
                    <addKeyPackageCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::addUser(inner) => {
                    <addUserCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::getAllKeyPackagesForUser(inner) => {
                    <getAllKeyPackagesForUserCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getAvailableKeyPackage(inner) => {
                    <getAvailableKeyPackageCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getUser(inner) => {
                    <getUserCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::userExists(inner) => {
                    <userExistsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`ScKeystore`](self) custom errors.
    pub enum ScKeystoreErrors {
        MalformedKeyPackage(MalformedKeyPackage),
        MalformedUserInfo(MalformedUserInfo),
        OwnableInvalidOwner(OwnableInvalidOwner),
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
        UserAlreadyExists(UserAlreadyExists),
        UserDoesNotExist(UserDoesNotExist),
    }
    #[automatically_derived]
    impl ScKeystoreErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [17u8, 140u8, 218u8, 167u8],
            [30u8, 79u8, 189u8, 247u8],
            [43u8, 195u8, 43u8, 22u8],
            [144u8, 123u8, 54u8, 31u8],
            [195u8, 68u8, 57u8, 126u8],
            [249u8, 105u8, 221u8, 89u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ScKeystoreErrors {
        const NAME: &'static str = "ScKeystoreErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 6usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::MalformedKeyPackage(_) => {
                    <MalformedKeyPackage as alloy_sol_types::SolError>::SELECTOR
                }
                Self::MalformedUserInfo(_) => {
                    <MalformedUserInfo as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::UserAlreadyExists(_) => {
                    <UserAlreadyExists as alloy_sol_types::SolError>::SELECTOR
                }
                Self::UserDoesNotExist(_) => {
                    <UserDoesNotExist as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ScKeystoreErrors>] = &[
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ScKeystoreErrors> {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ScKeystoreErrors::OwnableUnauthorizedAccount)
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ScKeystoreErrors> {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ScKeystoreErrors::OwnableInvalidOwner)
                    }
                    OwnableInvalidOwner
                },
                {
                    fn MalformedKeyPackage(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ScKeystoreErrors> {
                        <MalformedKeyPackage as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ScKeystoreErrors::MalformedKeyPackage)
                    }
                    MalformedKeyPackage
                },
                {
                    fn UserDoesNotExist(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ScKeystoreErrors> {
                        <UserDoesNotExist as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ScKeystoreErrors::UserDoesNotExist)
                    }
                    UserDoesNotExist
                },
                {
                    fn UserAlreadyExists(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ScKeystoreErrors> {
                        <UserAlreadyExists as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ScKeystoreErrors::UserAlreadyExists)
                    }
                    UserAlreadyExists
                },
                {
                    fn MalformedUserInfo(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ScKeystoreErrors> {
                        <MalformedUserInfo as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ScKeystoreErrors::MalformedUserInfo)
                    }
                    MalformedUserInfo
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::MalformedKeyPackage(inner) => {
                    <MalformedKeyPackage as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::MalformedUserInfo(inner) => {
                    <MalformedUserInfo as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::UserAlreadyExists(inner) => {
                    <UserAlreadyExists as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::UserDoesNotExist(inner) => {
                    <UserDoesNotExist as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::MalformedKeyPackage(inner) => {
                    <MalformedKeyPackage as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::MalformedUserInfo(inner) => {
                    <MalformedUserInfo as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::UserAlreadyExists(inner) => {
                    <UserAlreadyExists as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::UserDoesNotExist(inner) => {
                    <UserDoesNotExist as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`ScKeystore`](self) events.
    pub enum ScKeystoreEvents {
        OwnershipTransferred(OwnershipTransferred),
        UserAdded(UserAdded),
        UserKeyPackageAdded(UserKeyPackageAdded),
    }
    #[automatically_derived]
    impl ScKeystoreEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                61u8,
                61u8,
                5u8,
                55u8,
                89u8,
                102u8,
                48u8,
                135u8,
                153u8,
                242u8,
                117u8,
                131u8,
                23u8,
                61u8,
                115u8,
                173u8,
                173u8,
                14u8,
                150u8,
                72u8,
                170u8,
                201u8,
                109u8,
                53u8,
                75u8,
                13u8,
                85u8,
                74u8,
                110u8,
                168u8,
                213u8,
                116u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
            [
                213u8,
                148u8,
                225u8,
                160u8,
                147u8,
                84u8,
                175u8,
                9u8,
                62u8,
                155u8,
                186u8,
                63u8,
                83u8,
                84u8,
                86u8,
                231u8,
                229u8,
                176u8,
                52u8,
                89u8,
                144u8,
                227u8,
                124u8,
                55u8,
                233u8,
                196u8,
                27u8,
                181u8,
                123u8,
                153u8,
                18u8,
                202u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for ScKeystoreEvents {
        const NAME: &'static str = "ScKeystoreEvents";
        const COUNT: usize = 3usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(<UserAdded as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <UserAdded as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::UserAdded)
                }
                Some(
                    <UserKeyPackageAdded as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <UserKeyPackageAdded as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::UserKeyPackageAdded)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for ScKeystoreEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::UserAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::UserKeyPackageAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::UserAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::UserKeyPackageAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`ScKeystore`](self) contract instance.

See the [wrapper's documentation](`ScKeystoreInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> ScKeystoreInstance<T, P, N> {
        ScKeystoreInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        initialOwner: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<ScKeystoreInstance<T, P, N>>,
    > {
        ScKeystoreInstance::<T, P, N>::deploy(provider, initialOwner)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        initialOwner: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        ScKeystoreInstance::<T, P, N>::deploy_builder(provider, initialOwner)
    }
    /**A [`ScKeystore`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`ScKeystore`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct ScKeystoreInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for ScKeystoreInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("ScKeystoreInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ScKeystoreInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`ScKeystore`](self) contract instance.

See the [wrapper's documentation](`ScKeystoreInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            initialOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<ScKeystoreInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, initialOwner);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            initialOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { initialOwner },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> ScKeystoreInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> ScKeystoreInstance<T, P, N> {
            ScKeystoreInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ScKeystoreInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`addKeyPackage`] function.
        pub fn addKeyPackage(
            &self,
            keyPackage: <KeyPackage as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, addKeyPackageCall, N> {
            self.call_builder(&addKeyPackageCall { keyPackage })
        }
        ///Creates a new call builder for the [`addUser`] function.
        pub fn addUser(
            &self,
            user: alloy::sol_types::private::Address,
            signaturePubKey: alloy::sol_types::private::Bytes,
            keyPackage: <KeyPackage as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, addUserCall, N> {
            self.call_builder(
                &addUserCall {
                    user,
                    signaturePubKey,
                    keyPackage,
                },
            )
        }
        ///Creates a new call builder for the [`getAllKeyPackagesForUser`] function.
        pub fn getAllKeyPackagesForUser(
            &self,
            user: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, getAllKeyPackagesForUserCall, N> {
            self.call_builder(
                &getAllKeyPackagesForUserCall {
                    user,
                },
            )
        }
        ///Creates a new call builder for the [`getAvailableKeyPackage`] function.
        pub fn getAvailableKeyPackage(
            &self,
            user: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, getAvailableKeyPackageCall, N> {
            self.call_builder(&getAvailableKeyPackageCall { user })
        }
        ///Creates a new call builder for the [`getUser`] function.
        pub fn getUser(
            &self,
            user: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, getUserCall, N> {
            self.call_builder(&getUserCall { user })
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall {})
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`userExists`] function.
        pub fn userExists(
            &self,
            user: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, userExistsCall, N> {
            self.call_builder(&userExistsCall { user })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ScKeystoreInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`UserAdded`] event.
        pub fn UserAdded_filter(&self) -> alloy_contract::Event<T, &P, UserAdded, N> {
            self.event_filter::<UserAdded>()
        }
        ///Creates a new event filter for the [`UserKeyPackageAdded`] event.
        pub fn UserKeyPackageAdded_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, UserKeyPackageAdded, N> {
            self.event_filter::<UserKeyPackageAdded>()
        }
    }
}
